#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from urllib import quote
from Plugins.Extensions.OpenWebif.local import tstrings

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1406885499.3656
__CHEETAH_genTimestamp__ = 'Fri Aug  1 18:31:39 2014'
__CHEETAH_src__ = '/home/wslee2/models/5-wo/force1plus/openpli3.0/build-force1plus/tmp/work/mips32el-oe-linux/enigma2-plugin-extensions-openwebif-1+git5+3c0c4fbdb28d7153bf2140459b553b3d5cdd4149-r0/git/plugin/controllers/views/ajax/movies.tmpl'
__CHEETAH_srcLastModified__ = 'Fri Aug  1 18:30:05 2014'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class movies(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(movies, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''<div id="content_main" style="min-height: 500px;">\r
\t<div id="info">\r
\t\t<h3>''')
        _v = VFFSL(SL,"tstrings",True)['movielist'] # u"$tstrings['movielist']" on line 5, col 7
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['movielist']")) # from line 5, col 7.
        write(u'''</h3>\r
\t\t<hr />\r
\t\t\r
\t\t<div style="width: 100%; text-align: left; margin-bottom: 20px;">\r
\r
''')
        path = ''
        write(u'''\t\t\r
\t\t<span id="moviebuttons">\r
\t\t\t<button onclick="load_maincontent_spin(\'/ajax/movies?dirname=/\'); return false">''')
        _v = VFFSL(SL,"tstrings",True)['Root'] # u"$tstrings['Root']" on line 13, col 84
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['Root']")) # from line 13, col 84.
        write(u'''</button>\r
''')
        for dir in VFN(VFFSL(SL,"directory",True)[0:-1],"split",False)("/")[1:-1]: # generated from line 14, col 4
            path += '/' + VFFSL(SL,"dir",True)
            write(u'''\t\t\t\t<button onclick="load_maincontent_spin(\'/ajax/movies?dirname=\'+escape(\'''')
            _v = VFFSL(SL,"path",True) # u'$path' on line 16, col 76
            if _v is not None: write(_filter(_v, rawExpr=u'$path')) # from line 16, col 76.
            write(u'''\'));">''')
            _v = VFFSL(SL,"dir",True) # u'$dir' on line 16, col 87
            if _v is not None: write(_filter(_v, rawExpr=u'$dir')) # from line 16, col 87.
            write(u'''</button>\r
''')
        if VFFSL(SL,"directory",True) != '/': # generated from line 18, col 4
            write(u'''\t\t\t\t<button><span style="color: red; font-weight: bold;">\r
''')
            _v = VFN(VFFSL(SL,"directory",True)[0:-1],"split",False)("/")[-1]
            if _v is not None: write(_filter(_v))
            write(u'''\t\t\t\t</span></button>\r
''')
        write(u'''\t\t</span>\r
\r
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"bookmarks",True)): # generated from line 25, col 3
            write(u'''\t\t\t<select name="directory" onChange="load_maincontent_spin(\'/ajax/movies?dirname=\'+escape(options[selectedIndex].value)); return false;">\r
\t\t\t<option>Subdirs:</option>\r
''')
            for bookmark in VFFSL(SL,"bookmarks",True): # generated from line 28, col 4
                write(u'''\t\t\t\t<option value="''')
                _v = VFFSL(SL,"directory",True) # u'$directory' on line 29, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$directory')) # from line 29, col 20.
                _v = VFFSL(SL,"bookmark",True) # u'$bookmark' on line 29, col 30
                if _v is not None: write(_filter(_v, rawExpr=u'$bookmark')) # from line 29, col 30.
                write(u'''">''')
                _v = VFFSL(SL,"bookmark",True) # u'$bookmark' on line 29, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'$bookmark')) # from line 29, col 41.
                write(u'''</option>\r
''')
            write(u'''\t\t\t</select>\r
''')
        write(u'''\t\t</div>\r
\r
\t\t<div style="height: 640px; overflow: auto;">\r
''')
        count = 0
        for movie in VFFSL(SL,"movies",True): # generated from line 37, col 3
            write(u'''\t\t\t<div class="moviecontainer_main" id="''')
            _v = VFFSL(SL,"count",True) # u'$count' on line 38, col 41
            if _v is not None: write(_filter(_v, rawExpr=u'$count')) # from line 38, col 41.
            write(u'''">\r
\t\t\t\t<div class="moviecontainer_left">\r
''')
            if VFFSL(SL,"movie.eventname",True) != "": # generated from line 40, col 6
                write(u'''\t\t\t\t\t\t<div style="padding: 3px;">\r
\t\t\t\t\t\t\t<span style="color: #176093; font-weight: bold;">''')
                _v = VFFSL(SL,"movie.eventname",True) # u'$movie.eventname' on line 42, col 57
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.eventname')) # from line 42, col 57.
                write(u'''</span><br /> ''')
                _v = VFFSL(SL,"movie.servicename",True) # u'$movie.servicename' on line 42, col 87
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.servicename')) # from line 42, col 87.
                write(u'''  ''')
                _v = VFFSL(SL,"movie.begintime",True) # u'$movie.begintime' on line 42, col 107
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.begintime')) # from line 42, col 107.
                write(u'''<br /> ''')
                _v = VFFSL(SL,"movie.length",True) # u'$movie.length' on line 42, col 130
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.length')) # from line 42, col 130.
                write(u''' min.\r
\t\t\t\t\t\t</div>\r
\t\t\t\t\t\t<div style="padding: 3px;">\r
\t\t\t\t\t\t\t<span style="color: #7F8181; font-weight: bold;">''')
                _v = VFFSL(SL,"movie.description",True) # u'$movie.description' on line 45, col 57
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.description')) # from line 45, col 57.
                write(u'''</span>\r
\t\t\t\t\t\t</div>\r
\t\t\t\t\t\t<div style="padding: 3px;">\r
\t\t\t\t\t\t\t<span style="color: #7F8181;">''')
                _v = VFFSL(SL,"movie.descriptionExtended",True) # u'$movie.descriptionExtended' on line 48, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.descriptionExtended')) # from line 48, col 38.
                write(u'''</span>\r
\t\t\t\t\t\t</div>\r
''')
            else: # generated from line 50, col 6
                write(u'''\t\t\t\t\t\t<div style="padding: 3px;">\r
\t\t\t\t\t\t\t<span style="color: #176093; font-weight: bold;">''')
                _v = VFFSL(SL,"movie.filename",True) # u'$movie.filename' on line 52, col 57
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.filename')) # from line 52, col 57.
                write(u'''</span>\r
\t\t\t\t\t\t</div>\r
''')
            write(u'''\t\t\t\t</div>\r
\t\t\t\t<div class="moviecontainer_right">\r
\t\t\t\t\t<div style="padding: 3px; text-align: right;">\r
''')
            if VFFSL(SL,"transcoding",True): # generated from line 58, col 7
                write(u'''\t\t\t\t\t\t<a href="#" onclick="jumper80(\'''')
                _v = VFFSL(SL,"quote",False)(VFFSL(SL,"movie.filename",True)) # u'$quote($movie.filename)' on line 59, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'$quote($movie.filename)')) # from line 59, col 38.
                write(u'''\');">\r
\t\t\t\t\t\t\t<img align="top" src="../images/ico_stream.png" title="''')
                _v = VFFSL(SL,"tstrings",True)['stream'] # u"$tstrings['stream']" on line 60, col 63
                if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['stream']")) # from line 60, col 63.
                write(u''' ''')
                _v = VFFSL(SL,"movie.eventname",True) # u'$movie.eventname' on line 60, col 83
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.eventname')) # from line 60, col 83.
                write(u'''" border="0">\r
\t\t\t\t\t\t</a>\r
\t\t\t\t\t\t<a href="#" onclick="jumper8003(\'''')
                _v = VFFSL(SL,"quote",False)(VFFSL(SL,"movie.filename",True)) # u'$quote($movie.filename)' on line 62, col 40
                if _v is not None: write(_filter(_v, rawExpr=u'$quote($movie.filename)')) # from line 62, col 40.
                write(u'''\');">\r
\t\t\t\t\t\t\t<img align="top" src="../images/ico_stream.png" title="''')
                _v = VFFSL(SL,"tstrings",True)['stream'] # u"$tstrings['stream']" on line 63, col 63
                if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['stream']")) # from line 63, col 63.
                write(u''' Port 8002 ''')
                _v = VFFSL(SL,"movie.eventname",True) # u'$movie.eventname' on line 63, col 93
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.eventname')) # from line 63, col 93.
                write(u'''" border="0">\r
\t\t\t\t\t\t</a>\r
''')
            else: # generated from line 65, col 7
                write(u'''\t\t\t\t\t\t<a target="_blank" href=\'/web/ts.m3u?file=''')
                _v = VFFSL(SL,"quote",False)(VFFSL(SL,"movie.filename",True)) # u'$quote($movie.filename)' on line 66, col 49
                if _v is not None: write(_filter(_v, rawExpr=u'$quote($movie.filename)')) # from line 66, col 49.
                write(u'''\'>\r
\t\t\t\t\t\t\t<img align="top" src="../images/ico_stream.png" title="''')
                _v = VFFSL(SL,"tstrings",True)['stream'] # u"$tstrings['stream']" on line 67, col 63
                if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['stream']")) # from line 67, col 63.
                write(u''' ''')
                _v = VFFSL(SL,"movie.eventname",True) # u'$movie.eventname' on line 67, col 83
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.eventname')) # from line 67, col 83.
                write(u'''" border="0">\r
\t\t\t\t\t\t</a>\r
''')
            write(u"""\t\t\t\t\t\t<a href='/file?action=download&file=""")
            _v = VFFSL(SL,"quote",False)(VFFSL(SL,"movie.filename",True)) # u'$quote($movie.filename)' on line 70, col 43
            if _v is not None: write(_filter(_v, rawExpr=u'$quote($movie.filename)')) # from line 70, col 43.
            write(u'''\'>\r
\t\t\t\t\t\t\t<img align="top" src="../images/ico_download.png" title="''')
            _v = VFFSL(SL,"tstrings",True)['download'] # u"$tstrings['download']" on line 71, col 65
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['download']")) # from line 71, col 65.
            write(u''' ''')
            _v = VFFSL(SL,"movie.eventname",True) # u'$movie.eventname' on line 71, col 87
            if _v is not None: write(_filter(_v, rawExpr=u'$movie.eventname')) # from line 71, col 87.
            write(u'''" border="0">\r
\t\t\t\t\t\t</a>\r
\t\t\t\t\t\t<a href=\'#\' onClick="deleteMovie(\'''')
            _v = VFFSL(SL,"quote",False)(VFFSL(SL,"movie.serviceref",True)) # u'$quote($movie.serviceref)' on line 73, col 41
            if _v is not None: write(_filter(_v, rawExpr=u'$quote($movie.serviceref)')) # from line 73, col 41.
            write(u"""', '""")
            _v = VFFSL(SL,"count",True) # u'$count' on line 73, col 70
            if _v is not None: write(_filter(_v, rawExpr=u'$count')) # from line 73, col 70.
            write(u"""', '""")
            _v = VFFSL(SL,"movie.eventname",True) # u'$movie.eventname' on line 73, col 80
            if _v is not None: write(_filter(_v, rawExpr=u'$movie.eventname')) # from line 73, col 80.
            write(u'''\'); return false;">\r
\t\t\t\t\t\t\t<img src="../images/ico_delete.png" title="''')
            _v = VFFSL(SL,"tstrings",True)['delete_movie'] # u"$tstrings['delete_movie']" on line 74, col 51
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['delete_movie']")) # from line 74, col 51.
            write(u'''" border="0"></a>\r
\t\t\t\t\t\t</a>\r
\t\t\t\t\t</div>\r
\t\t\t\t</div>\r
\t\t\t\t<div style="clear: both;"></div>\r
''')
            count += 1
            write(u'''\t\t\t</div>\r
''')
        write(u'''\t\t</div>\r
\t</div>\r
</div>\r
\r
<script type="text/javascript">\r
$(\'#moviebuttons\').buttonset();\r
</script>\r
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_movies= 'respond'

## END CLASS DEFINITION

if not hasattr(movies, '_initCheetahAttributes'):
    templateAPIClass = getattr(movies, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(movies)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=movies()).run()


